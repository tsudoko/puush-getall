#!/usr/bin/env python3
from urllib.parse import unquote_plus
from bs4 import BeautifulSoup
import requests
import sys, os, re

# TODO: less ugly code
# TODO: fix argument parsing or remove it altogether

# downloads all files from your puush account
# PUUSH_API_KEY environment variable must contain your api key


def soup(session, url, params={}):
  if url[0] != '/':
    url = "/account" + url
  page = session.get("https://puush.me" + url, params=params)
  return BeautifulSoup(page.text)


def get_files(key, path):
  s = requests.Session()

  acc = soup(s, "/login/go", params={'k': key})

  is_page = re.compile("\?pool=[0-9]+&page=")
  is_pool = lambda x: x and x.startswith("/account/?pool=")
  is_file = lambda x: x and x.startswith("http://puu.sh/")

  get_links = lambda x, *ar, **kw: [a['href'] for a in x.find_all(*ar, **kw)]

  pool_links = acc.find_all('a', href=is_pool)
  pools = []
  links = []

  if not pool_links:
    die("couldn't retrieve pools", code=2)

  for l in pool_links:
    item_count = int(l.contents[5].contents[0].split('(')[-1].split(')')[0])
    if item_count > 0:
      pools.append(l['href'])

  for p in pools:
    ps = soup(s, p)
    # get all the file links from the page 1
    links += get_links(ps, 'a', href=is_file)
    page_links = get_links(ps, 'a', href=is_page)
    if page_links:
      page_links = [int(a.split('page=')[-1]) for a in page_links]
      last_page = max(page_links)
      # return the page list without the first page (since we have files from
      # the first page already)
      page_url = p + "&page="
      page_links = [page_url + str(pnum) for pnum in range(2, last_page+1)]
      for page in page_links:
        page = soup(s, page)
        links += get_links(page, 'a', href=is_file)

  for i in links:
    r = s.head(i)
    namae = i.split('/')[3].split('.')[0]
    namae += '_'+unquote_plus(r.headers['Content-disposition'].split('"')[-2])
    filename = os.path.join(path, namae)
    if not os.path.exists(filename):
      r = s.get(i, stream=True)
      with open(filename, "wb") as f:
        for chunk in r.iter_content(chunk_size=1024):
          f.write(chunk)
          f.flush()


def die(*args, **kwargs):
  code = kwargs.pop('code', 1)
  print(os.path.basename(sys.argv[0]) + ':', *args, file=sys.stderr, **kwargs)
  exit(code=code)


def argparse():
  path = None
  for a in sys.argv[1:]:
    if os.path.isdir(a):
      path = a
      break
  return path

if __name__ == "__main__":
  path = argparse()
  if "PUUSH_API_KEY" in os.environ:
    key = os.environ['PUUSH_API_KEY']
  else:
    die("api key not given or invalid")
  if path is None:
    die("no path specified")
  get_files(key, path)
